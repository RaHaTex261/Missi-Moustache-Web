services:
  # Service Backend Node.js
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ndao-iresaka-backend
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://admin:secret@ndao-iresaka-mongodb:27017/ndao-iresaka?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-votre_secret_jwt}
      - PORT=4000
    volumes:
      - ./logs:/usr/src/app/logs
      - ./uploads:/usr/src/app/uploads
      - ./public:/usr/src/app/public
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - ndao-network

  # Service MongoDB
  mongodb:
    image: mongo:5.0
    container_name: ndao-iresaka-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=ndao-iresaka
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    command: ["--bind_ip_all"]
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ndao-network

  # Service Nginx (Frontend + Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: ndao-iresaka-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./public:/usr/share/nginx/html
      - ./views:/usr/share/nginx/html/views
      - ./uploads:/usr/share/nginx/html/uploads
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - ndao-network

  # Service Redis pour le cache et les sessions
  redis:
    image: redis:alpine
    container_name: ndao-iresaka-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ndao-network

  # Service Certbot pour SSL
  certbot:
    image: certbot/certbot
    container_name: ndao-iresaka-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${SSL_EMAIL:-admin@example.com} -d ${DOMAIN:-localhost} --agree-tos --non-interactive

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  ndao-network:
    driver: bridge
